build: false

environment:
  PYPI_PASSWORD:
    secure: 9NqOJYSnExOsNW15tqSNOV/tLcIAeQOknx7PpXdZ0Vw=
  PYPITEST_PASSWORD:
    secure: V4MvmVbhivy0HjzUsUqp7s8TRzSiv1yjWnH3rbzRDobU3dJMwWmkvQyAGr0J5Il1
  matrix:
    - PYTHON_VERSION: 3.5
      MINICONDA: C:\Miniconda3
      RESTORE_MINICONDA: C:\Miniconda35
      PYTHON_ARCH: "32"
    - PYTHON_VERSION: 3.5
      MINICONDA: C:\Miniconda3-x64
      RESTORE_MINICONDA: C:\Miniconda35-x64
      PYTHON_ARCH: "64"
    - PYTHON_VERSION: 3.6
      MINICONDA: C:\Miniconda3
      RESTORE_MINICONDA: C:\Miniconda36
      PYTHON_ARCH: "32"
    - PYTHON_VERSION: 3.6
      MINICONDA: C:\Miniconda3-x64
      RESTORE_MINICONDA: C:\Miniconda36-x64
      PYTHON_ARCH: "64"
    - PYTHON_VERSION: 3.7
      MINICONDA: C:\Miniconda3
      RESTORE_MINICONDA: C:\Miniconda37
      PYTHON_ARCH: "32"
    - PYTHON_VERSION: 3.7
      MINICONDA: C:\Miniconda3-x64
      RESTORE_MINICONDA: C:\Miniconda37-x64
      PYTHON_ARCH: "64"

init:
  - "ECHO %PYTHON_VERSION% %MINICONDA%"

install:
  - git submodule update --init --recursive
  - "set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%"
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  - "conda create -q -n test-environment python=%PYTHON_VERSION% numpy scipy>=0.18.0 matplotlib nose"
  - pip install twine wheel
  - activate test-environment

  - pip install -r requirements.txt
  - python setup.py install

test_script:
  - python.exe setup.py build_ext --inplace
  - nosetests

after_test:
  # This step builds your wheels.
  - python.exe setup.py bdist_wheel

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*.whl

deploy_script:
  - echo "Starting Artifact Deployment"
  # populate pypirc file for twine
  - echo [distutils]                                   > %USERPROFILE%\\.pypirc
  - echo index-servers =                              >> %USERPROFILE%\\.pypirc
  - echo     pypi                                     >> %USERPROFILE%\\.pypirc
  - echo     pypitest                                 >> %USERPROFILE%\\.pypirc
  - echo [pypi]                                       >> %USERPROFILE%\\.pypirc
  - echo username=fakufaku                            >> %USERPROFILE%\\.pypirc
  - echo password=%PYPI_PASSWORD%                     >> %USERPROFILE%\\.pypirc
  - echo [pypitest]                                   >> %USERPROFILE%\\.pypirc
  - echo repository=https://test.pypi.org/legacy/     >> %USERPROFILE%\\.pypirc
  - echo username=fakufaku                            >> %USERPROFILE%\\.pypirc
  - echo password=%PYPITEST_PASSWORD%                 >> %USERPROFILE%\\.pypirc
  # upload to pypi for windows
  - set PATH=%BK_PATH%
  - set HOME=%USERPROFILE%
  - ps: If ($env:APPVEYOR_REPO_BRANCH -eq "pypi-test") { Invoke-Expression "twine upload --repository pypitest --skip-existing dist/*.whl" } Else { write-output "Not on a tag on pypi-test, won't deploy to pypitest"}
  - ps: If ($env:APPVEYOR_REPO_TAG -eq "true" -And $env:APPVEYOR_REPO_BRANCH -eq "pypi-release") { Invoke-Expression "twine upload --skip-existing dist/*.whl" 2>$null } Else { write-output "Not on a tag on pypi-release, won't deploy to pypi"}
  - echo "Finished Artifact Deployment"

notifications:
  - provider: Slack
    incoming_webhook:
      secure: nqOk3aT2OywRUWp1LQ2geV/UcGqrz1wN/q24xrrNI8HsNX2HGit3psyMvzS4taPzB4fzNFdOMHHoyqbruc4lpqOr1PWql5PVwpq1K46L8Bw=
